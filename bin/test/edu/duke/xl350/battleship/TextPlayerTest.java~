package edu.duke.xl350.battleship;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

public class TextPlayerTest {
  @Test
  void test_read_placement() throws IOException{

    TextPlayer player = createTextPlayer(10, 20, "B2V\nC8H\na4v\n", bytes);
        
    String prompt = "Please enter a location for a ship:";
    Placement[] expected = new Placement[3];
    expected[0] = new Placement(new Coordinate(1, 2), 'V');
    expected[1] = new Placement(new Coordinate(2, 8), 'H');
    expected[2] = new Placement(new Coordinate(0, 4), 'V');

    for (int i = 0; i < expected.length; i++) {
        Placement p = player.readPlacement(prompt);
        assertEquals(p, expected[i]); //did we get the right Placement back
        assertEquals(prompt + "\n", bytes.toString()); //should have printed prompt and newline
        bytes.reset(); //clear out bytes for next time around
    }
  }

  @Test
  void test_do_one_placement() throws IOException{
    
    TextPlayer player = createTextPlayer(10, 20, "B2V\nC8H\na4v\n", bytes);

    String[] expected = new String[2];
    expected[0] = "  0|1|2\n"+"A d| |  A\n"+"B d| |  B\n"+"C d| |  C\n"+"D  | |  D\n"+"  0|1|2\n";
    expected[1] = "  0|1|2\n"+"A d| |  A\n"+"B d| |  B\n"+"C d| |  C\n"+"D d|d|d D\n"+"  0|1|2\n";
        
    for(int i=0;i<expected.length;i++){
        player.doOnePlacement();
        assertEquals("Where would you like to put your ship?\n"+expected[i], bytes.toString());
        bytes.reset();
    }
  }

  private TextPlayer createTextPlayer(int w, int h, String inputData, ByteArrayOutputStream bytes) {
    BufferedReader input = new BufferedReader(new StringReader(inputData));
    PrintStream output = new PrintStream(bytes, true);
    Board<Character> board = new BattleShipBoard<Character>(w, h);
    V1ShipFactory shipFactory = new V1ShipFactory();
    return new TextPlayer("A", board, input, output, shipFactory);
  }

}
